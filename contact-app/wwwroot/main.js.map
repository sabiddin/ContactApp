{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.material.module.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/application-form/application-form.component.css","webpack:///./src/app/application-form/application-form.component.html","webpack:///./src/app/application-form/application-form.component.ts","webpack:///./src/app/application-list/application-list.component.css","webpack:///./src/app/application-list/application-list.component.html","webpack:///./src/app/application-list/application-list.component.ts","webpack:///./src/app/contactform/contactform.component.css","webpack:///./src/app/contactform/contactform.component.html","webpack:///./src/app/contactform/contactform.component.ts","webpack:///./src/app/contactlist/contactlist.component.css","webpack:///./src/app/contactlist/contactlist.component.html","webpack:///./src/app/contactlist/contactlist.component.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/menu/menu.component.css","webpack:///./src/app/menu/menu.component.html","webpack:///./src/app/menu/menu.component.ts","webpack:///./src/app/services/application.service.ts","webpack:///./src/app/services/contact.service.ts","webpack:///./src/app/shared/DBOperation.ts","webpack:///./src/app/shared/Global.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule }             from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AppComponent } from './app.component';  \nimport { ContactlistComponent } from './contactlist/contactlist.component';  \nimport { ContactformComponent } from './contactform/contactform.component';  \nimport { ApplicationListComponent } from './application-list/application-list.component';\nimport { ApplicationFormComponent  } from \"./application-form/application-form.component\";\nimport { HomeComponent  } from \"./home/home.component\";\nconst appRoutes: Routes = [\n  { path: '',  pathMatch: 'full', component: ApplicationListComponent  },\n  { path: 'contactform', component: ContactformComponent  },\n  { path: 'contacts', component: ContactlistComponent  },\n  { path: 'applications', component:ApplicationListComponent },\n  { path: 'home', component: HomeComponent },\n  { path: 'applicationform', component: ApplicationFormComponent}\n];  \n@NgModule({\n  imports: [ RouterModule.forRoot(appRoutes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule {}\n","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->  \\n\\n\\n<div class='container-fluid'>\\n        <div class='row'>\\n          <div class='col-sm-3'>\\n            <app-menu></app-menu>\\n          </div>\\n          <div class='col-sm-9 body-content'>\\n                <mat-toolbar> <span> Nethealth Accounts</span> </mat-toolbar>  \\n                <router-outlet></router-outlet>\\n          </div>\\n        </div>\\n      </div>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { NgModule } from '@angular/core';\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatTableModule } from '@angular/material';\nimport { MatPaginatorModule, MatFormFieldModule, MatRadioModule, MatSelectModule, MatInputModule } from '@angular/material';\nimport { MatDatepickerModule, MatNativeDateModule, MatOptionModule, MatDialogModule } from '@angular/material';\nimport {  MatProgressSpinnerModule, MatSnackBarModule } from '@angular/material';\n\n\n@NgModule({\n    imports: [\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatIconModule,\n        MatListModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatFormFieldModule,\n        MatRadioModule,\n        MatSelectModule,\n        MatInputModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatOptionModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatSnackBarModule\n    ],\n    exports: [\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatIconModule,\n        MatListModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatFormFieldModule,\n        MatRadioModule,\n        MatSelectModule,\n        MatInputModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatOptionModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatSnackBarModule\n    ],\n})\nexport class AppMaterialModule { }","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { AppMaterialModule } from './/app.material.module';\nimport { ContactformComponent } from './contactform/contactform.component';\nimport { ContactlistComponent } from './contactlist/contactlist.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { ContactService } from './services/contact.service';\nimport { ApplicationService } from './services/application.service';\nimport { ApplicationListComponent } from './application-list/application-list.component';\nimport { ApplicationFormComponent } from './application-form/application-form.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { HomeComponent } from './home/home.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ContactformComponent,\n    ContactlistComponent,\n    ApplicationListComponent,\n    ApplicationFormComponent,\n    MenuComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,    \n    HttpClientModule,\n    AppMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    LayoutModule,\n    AppRoutingModule    \n  ],\n  providers: [\n    ContactService, \n    ApplicationService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".contact-form {\\r\\n    min-width: 150px;\\r\\n    max-width:700px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .control-field {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \"","module.exports = \"<form  (ngSubmit)=\\\"onSubmit(applicationFrm)\\\"  [formGroup]=\\\"applicationFrm\\\" class=\\\"application-form\\\">\\n  <h2 mat-dialog-title>{{data.modalTitle}}</h2>  \\n  <mat-dialog-content>\\n      <div>\\n          <mat-form-field class=\\\"control-field\\\">\\n          <mat-label>Client ID</mat-label>\\n          <input matInput placeholder=\\\"Client ID\\\" formControlName=\\\"clientID\\\">        \\n          <mat-error *ngIf=\\\"formErrors.clientID\\\">\\n            {{ formErrors.clientID }}\\n          </mat-error>\\n        </mat-form-field>\\n      </div>\\n  <div>\\n      <mat-form-field class=\\\"control-field\\\">\\n      <mat-label>Client Name</mat-label>\\n      <input matInput placeholder=\\\"Client Name\\\" formControlName=\\\"clientName\\\">   \\n      <mat-error *ngIf=\\\"formErrors.clientName\\\">\\n        {{ formErrors.clientName }}\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field class=\\\"control-field\\\">\\n      <mat-label>Client Uri</mat-label>\\n      <input type=\\\"url\\\" matInput placeholder=\\\"clientUri\\\" formControlName=\\\"clientUri\\\">\\n      <mat-error *ngIf=\\\"formErrors.clientUri\\\">\\n        {{ formErrors.clientUri }}\\n      </mat-error>\\n    </mat-form-field>  \\n  </div>\\n  <div>\\n  <mat-form-field class=\\\"control-field\\\">\\n      <mat-label>Secret</mat-label>\\n      <input type=\\\"text\\\" matInput placeholder=\\\"secret\\\" formControlName=\\\"secret\\\">\\n      <mat-error *ngIf=\\\"formErrors.secret\\\">\\n        {{ formErrors.secret }}\\n      </mat-error>\\n    </mat-form-field> \\n  </div>   \\n  <div>    \\n    <mat-form-field class=\\\"control-field\\\">\\n        <mat-label>Redirect Uri</mat-label>\\n        <input type=\\\"url\\\" matInput placeholder=\\\"redirectUri\\\" formControlName=\\\"redirectUri\\\">\\n        <mat-error *ngIf=\\\"formErrors.redirectUri\\\">\\n          {{ formErrors.redirectUri }}\\n        </mat-error>\\n      </mat-form-field>    \\n    </div>  \\n    <div>    \\n        <mat-form-field class=\\\"control-field\\\">\\n            <mat-label>Post Logout Redirect Uri</mat-label>\\n            <input type=\\\"url\\\" matInput placeholder=\\\"postLogoutRedirectUri\\\" formControlName=\\\"postLogoutRedirectUri\\\">\\n            <mat-error *ngIf=\\\"formErrors.postLogoutRedirectUri\\\">\\n              {{ formErrors.postLogoutRedirectUri }}\\n            </mat-error>\\n          </mat-form-field>    \\n        </div> \\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <div>\\n  \\n    <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"dialogRef.close()\\\">Cancel</button>&nbsp;\\n    <button type=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" [disabled]=\\\"applicationFrm.invalid\\\">{{data.modalBtnTitle}}</button>\\n  </div>\\n</mat-dialog-actions>\\n  </form>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, AUTOCOMPLETE_PANEL_HEIGHT } from '@angular/material';\n\nimport { ApplicationListComponent } from '../application-list/application-list.component'\n\nimport { IApplication } from '../model/application';\nimport { ApplicationService } from '../services/application.service';\nimport { DBOperation } from '../shared/DBOperation';\nimport { Global } from '../shared/Global';\n\n@Component({\n  selector: 'app-application-form',\n  templateUrl: './application-form.component.html',\n  styleUrls: ['./application-form.component.css']\n})\nexport class ApplicationFormComponent implements OnInit {\n  msg: string;\n  indLoading = false;\n  applicationFrm: FormGroup;  \n  listFilter: string;\n  selectedOption: string;  \n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any,\n    private fb: FormBuilder,\n    private _applicationService: ApplicationService,\n    public dialogRef: MatDialogRef<ApplicationListComponent>) { }\n\n  ngOnInit() {  \n      this.applicationFrm = this.fb.group({\n      id:[''] , \n      clientID: [''],\n      clientName: ['', [Validators.required, Validators.maxLength(50)]],\n      clientUri: ['', [Validators.required]],\n      secret: ['', [Validators.required]],\n      redirectUri: ['', [Validators.required]],\n      postLogoutRedirectUri: ['', [Validators.required]]      \n    });\n \n    // subscribe on value changed event of form to show validation message\n    this.applicationFrm.valueChanges.subscribe(data => this.onValueChanged(data));\n    this.onValueChanged();\n\n    if (this.data.dbops === DBOperation.create) {\n      this.applicationFrm.reset();\n    } else {\n      this.applicationFrm.setValue(this.data.application);\n    }\n    this.SetControlsState(this.data.dbops === DBOperation.delete ? false : true);\n  }\n  // form value change event\n  onValueChanged(data?: any) {\n    if (!this.applicationFrm) { return; }\n    const form = this.applicationFrm;\n    // tslint:disable-next-line:forin\n    for (const field in this.formErrors) {\n      // clear previous error message (if any)\n      this.formErrors[field] = '';\n      const control = form.get(field);\n      // setup custom validation message to form\n      if (control && control.dirty && !control.valid) {\n        const messages = this.validationMessages[field];\n        // tslint:disable-next-line:forin\n        for (const key in control.errors) {\n          this.formErrors[field] += messages[key] + ' ';\n        }\n      }\n    }\n  }\n  // form errors model\n\n  formErrors = {\n    'clientID': '',\n    'clientName': '',\n    'clientUri': '',\n    'secret': '',\n    'redirectUri': '',\n    'postLogoutRedirectUri': ''\n  };\n  // custom valdiation messages\n  // tslint:disable-next-line:member-ordering\n  validationMessages = {\n    'clientID': {      \n      'required': 'Client ID is required.'\n    },\n    'clientName': {\n      'maxlength': 'Client Name cannot be more than 50 characters long.',\n      'required': 'Client Name is required.'\n    },\n    'clientUri': {      \n      'required': 'Client Uri is required.'\n    },\n    'secret': {\n      'required': 'Secret is required.'\n    },\n    'redirectUri': {\n      'required': 'redirectUri is required.'\n    },\n    'postLogoutRedirectUri': {\n      'required': 'Post Logout Redirect Uri is required.'\n    }\n\n  };\n  onSubmit(formData: any) {    \n    const applicationData = this.mapDateData(formData.value);\n    switch (this.data.dbops) {\n      case DBOperation.create:\n        this._applicationService.create(Global.BASE_APPLICATION_ENDPOINT + 'Create', applicationData).subscribe(\n          data => {\n            // Success\n            if (data.message) {\n              this.dialogRef.close('success');\n            } else {\n              this.dialogRef.close('error');\n            }\n          },\n          error => {\n            this.dialogRef.close('error');\n          }\n        );\n        break;\n      case DBOperation.update:\n        this._applicationService.update(Global.BASE_APPLICATION_ENDPOINT + 'Update', applicationData.clientID, applicationData).subscribe(\n          data => {\n            // Success\n            if (data.message) {\n              this.dialogRef.close('success');\n            } else {\n              this.dialogRef.close('error');\n            }\n          },\n          error => {\n            this.dialogRef.close('error');\n          }\n        );\n        break;\n      case DBOperation.delete:\n        this._applicationService.delete(Global.BASE_APPLICATION_ENDPOINT + 'Delete', applicationData.clientID).subscribe(\n          data => {\n            // Success\n            if (data.message) {\n              this.dialogRef.close('success');\n            } else {\n              this.dialogRef.close('error');\n            }\n          },\n          error => {\n            this.dialogRef.close('error');\n          }\n        );\n        break;\n    }\n  }\n  SetControlsState(isEnable: boolean) {\n    isEnable ? this.applicationFrm.enable() : this.applicationFrm.disable();\n  }\n\n  mapDateData(application: IApplication): IApplication {        \n    if(!application.id)\n      application.id=0\n    return application;\n  }\n}","module.exports = \".spinner{\\r\\n    top: 45%;\\r\\n    left: 47%;\\r\\n    position: fixed;\\r\\n  }\\r\\n  .applicationlist-container, #paginator {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    min-width: 300px;\\r\\n    max-width: 1200px;\\r\\n    max-height: 700px;\\r\\n    overflow: auto;\\r\\n    margin: 0 auto;\\r\\n  }\\r\\n  table {\\r\\n    width: 100%;\\r\\n  }\\r\\n  th.mat-sort-header-sorted {\\r\\n    color: black;\\r\\n  }\"","module.exports = \"<div class=\\\"spinner\\\" *ngIf=\\\"loadingState; else applicationlist\\\">\\n  <mat-spinner></mat-spinner>\\n</div>\\n<ng-template class=\\\"applicationlist\\\" #applicationlist>\\n  <h2 style=\\\"text-align: center;\\\">Application List</h2>\\n  <div class=\\\"applicationlist-container mat-elevation-z8\\\">\\n    <div>\\n      <button title=\\\"Create\\\" mat-raised-button color=\\\"accent\\\" (click)=\\\"addApplication()\\\">Create</button>\\n    </div>\\n    <table mat-table #table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n        <ng-container matColumnDef=\\\"clientID\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Client ID </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clientID}} </td>\\n          </ng-container>\\n      <!-- Name Column -->\\n      <ng-container matColumnDef=\\\"clientName\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Cient Name </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clientName}} </td>\\n      </ng-container>\\n\\n      <!-- Email Column -->\\n      <ng-container matColumnDef=\\\"clientUri\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Client Uri </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clientUri}} </td>\\n      </ng-container>\\n\\n      <!-- Gender Column -->\\n      <ng-container matColumnDef=\\\"redirectUri\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Redirect Uri </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.redirectUri}} </td>\\n      </ng-container>\\n\\n      <!-- Birth Column -->\\n      <ng-container matColumnDef=\\\"postLogoutRedirectUri\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Post Logout Redirect Uri </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.postLogoutRedirectUri}} </td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"action\\\">\\n        <th mat-header-cell *matHeaderCellDef> Action </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <button title=\\\"Edit\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"editApplication(element.clientID)\\\">Edit</button>\\n          <button title=\\\"Delete\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"deleteApplication(element.clientID)\\\">Delete</button>\\n        </td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n\\n  </div>\\n</ng-template>\"","import { Component, ViewChild, OnInit } from '@angular/core';\nimport { MatTableDataSource, MatSnackBar } from '@angular/material';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, MatSort } from '@angular/material';\n\nimport { ApplicationService } from '../services/application.service';\nimport { IApplication } from '../model/application';\nimport { DBOperation } from '../shared/DBOperation';\nimport { Global } from '../shared/Global';\nimport { ApplicationFormComponent } from '../application-form/application-form.component';\n\n@Component({\n  selector: 'app-application-list',\n  templateUrl: './application-list.component.html',\n  styleUrls: ['./application-list.component.css']\n})\nexport class ApplicationListComponent implements OnInit  {\n  applications: IApplication[];\n  application: IApplication;\n  loadingState: boolean;\n  dbops: DBOperation;\n  modalTitle: string;\n  modalBtnTitle: string;\n\n  // set columns that will need to show in listing table  \n  displayedColumns = ['clientID','clientName', 'clientUri', 'redirectUri', 'postLogoutRedirectUri', 'action'];\n  // setting up datasource for material table\n  dataSource = new MatTableDataSource<IApplication>();\n\n  constructor(public snackBar: MatSnackBar, private _applicationService: ApplicationService, private dialog: MatDialog) { }\n  @ViewChild(MatSort) sort: MatSort;\n  ngOnInit() {    \n    this.loadingState = true;\n    this.loadApplications();\n    this.dataSource.sort = this.sort;\n  }\n  openDialog(): void {\n    const dialogRef = this.dialog.open(ApplicationFormComponent, {\n      width: '700px',\n      data: { dbops: this.dbops, modalTitle: this.modalTitle, modalBtnTitle: this.modalBtnTitle, application: this.application }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      if (result === 'success') {\n        this.loadingState = true;\n        this.loadApplications();\n        switch (this.dbops) {\n          case DBOperation.create:\n            this.showMessage('Data successfully added.');\n            break;\n          case DBOperation.update:\n            this.showMessage('Data successfully updated.');\n            break;\n          case DBOperation.delete:\n            this.showMessage('Data successfully deleted.');\n            break;\n        }\n      } else if (result === 'error') {\n        this.showMessage('There is some issue in saving records, please contact to system administrator!');\n      } else {\n       // this.showMessage('Please try again, something went wrong');\n      }\n    });\n  }\n\n  loadApplications(): void {\n    this._applicationService.getAll(Global.BASE_APPLICATION_ENDPOINT + 'GetAll')\n      .subscribe(applications=> {\n        this.loadingState = false;\n        this.dataSource.data = applications;\n      });\n  }\n \n  addApplication() {\n    this.dbops = DBOperation.create;\n    this.modalTitle = 'Add New Application';\n    this.modalBtnTitle = 'Add';\n    this.openDialog();\n  }\n  editApplication(clientID: string) {\n    this.dbops = DBOperation.update;\n    this.modalTitle = 'Edit Application';\n    this.modalBtnTitle = 'Update';\n    this.application = this.dataSource.data.filter(x => x.clientID === clientID)[0];\n    this.openDialog();\n  }\n  deleteApplication(clientID: string) {\n    this.dbops = DBOperation.delete;\n    this.modalTitle = 'Confirm to Delete ?';\n    this.modalBtnTitle = 'Delete';\n    this.application = this.dataSource.data.filter(x => x.clientID === clientID)[0];\n    this.openDialog();\n  }\n  showMessage(msg: string) {\n    this.snackBar.open(msg, '', {\n      duration: 3000\n    });\n  }\n}\n\n","module.exports = \".contact-form {\\r\\n    min-width: 150px;\\r\\n    max-width:700px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .control-field {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \"","module.exports = \"<form  (ngSubmit)=\\\"onSubmit(contactFrm)\\\"  [formGroup]=\\\"contactFrm\\\" class=\\\"contact-form\\\">\\n  <h2 mat-dialog-title>{{data.modalTitle}}</h2>  \\n  <mat-dialog-content>\\n  <div>\\n      <mat-form-field class=\\\"control-field\\\">\\n      <mat-label>Name</mat-label>\\n      <input matInput placeholder=\\\"Name\\\" formControlName=\\\"name\\\">\\n      <!-- <mat-icon matSuffix>sentiment_very_satisfied</mat-icon> -->\\n      <!-- <mat-hint>Hint</mat-hint> -->\\n      <mat-error *ngIf=\\\"formErrors.name\\\">\\n        {{ formErrors.name }}\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field class=\\\"control-field\\\">\\n      <mat-label>Email</mat-label>\\n      <input type=\\\"email\\\" matInput placeholder=\\\"email\\\" formControlName=\\\"email\\\">\\n      <mat-error *ngIf=\\\"formErrors.email\\\">\\n        {{ formErrors.email }}\\n      </mat-error>\\n    </mat-form-field>\\n  \\n  </div>\\n    <p>\\n        <mat-radio-group class=\\\"contact-radio-group\\\" formControlName=\\\"gender\\\" >\\n            <mat-radio-button class=\\\"contact-radio-button\\\" *ngFor=\\\"let gndr of genders\\\" [value]=\\\"gndr.id\\\">\\n              {{ gndr.name }}\\n            </mat-radio-button>\\n          </mat-radio-group>\\n          <mat-error *ngIf=\\\"formErrors.gender\\\">\\n            {{ formErrors.gender }}\\n          </mat-error>\\n        </p>  \\n    \\n  <div>\\n    <mat-form-field >\\n      <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a birthday\\\" formControlName=\\\"birth\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #picker></mat-datepicker>\\n    \\n    <mat-error *ngIf=\\\"formErrors.birth \\\">\\n      {{ formErrors.birth }}\\n    </mat-error>\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field  class=\\\"control-field\\\">\\n      <mat-select placeholder=\\\"Select a Technology\\\" formControlName=\\\"techno\\\">\\n        <mat-option>-- None --</mat-option>\\n        <mat-option *ngFor=\\\"let techno  of technologies\\\" [value]=\\\"techno\\\">\\n          {{ techno }}\\n        </mat-option>\\n      </mat-select>\\n      <mat-error *ngIf=\\\"formErrors.techno \\\">\\n        {{ formErrors.techno }}\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field  class=\\\"control-field\\\">\\n      <textarea matInput placeholder=\\\"Message...\\\" formControlName=\\\"message\\\"></textarea>\\n      <mat-error *ngIf=\\\"formErrors.message \\\">\\n        {{ formErrors.message }}\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <div>\\n  \\n    <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"dialogRef.close()\\\">Cancel</button>&nbsp;\\n    <button type=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" [disabled]=\\\"contactFrm.invalid\\\">{{data.modalBtnTitle}}</button>\\n  </div>\\n</mat-dialog-actions>\\n  </form>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, AUTOCOMPLETE_PANEL_HEIGHT } from '@angular/material';\n\nimport { ContactlistComponent } from '../contactlist/contactlist.component';\n\nimport { IContact } from '../model/contact';\nimport { ContactService } from '../services/contact.service';\nimport { DBOperation } from '../shared/DBOperation';\nimport { Global } from '../shared/Global';\n\n@Component({\n  selector: 'app-contactform',\n  templateUrl: './contactform.component.html',\n  styleUrls: ['./contactform.component.css']\n})\n\nexport class ContactformComponent implements OnInit {\n  msg: string;\n  indLoading = false;\n  contactFrm: FormGroup;\n  // dbops: DBOperation;\n  // modalTitle: string;\n  // modalBtnTitle: string;\n  listFilter: string;\n  selectedOption: string;\n  // contact: IContact;\n  genders = [];\n  technologies = [];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any,\n    private fb: FormBuilder,\n    private _contactService: ContactService,\n    public dialogRef: MatDialogRef<ContactlistComponent>) { }\n\n  ngOnInit() {\n    // built contact form\n    this.contactFrm = this.fb.group({\n      id: [''],\n      name: ['', [Validators.required, Validators.maxLength(50)]],\n      email: ['', [Validators.required, Validators.email]],\n      gender: ['', [Validators.required]],\n      birth: ['', [Validators.required]],\n      techno: ['', [Validators.required]],\n      message: ['', [Validators.required]]\n    });\n    this.genders = Global.genders;\n    this.technologies = Global.technologies;\n\n    // subscribe on value changed event of form to show validation message\n    this.contactFrm.valueChanges.subscribe(data => this.onValueChanged(data));\n    this.onValueChanged();\n\n    if (this.data.dbops === DBOperation.create) {\n      this.contactFrm.reset();\n    } else {\n      this.contactFrm.setValue(this.data.contact);\n    }\n    this.SetControlsState(this.data.dbops === DBOperation.delete ? false : true);\n  }\n  // form value change event\n  onValueChanged(data?: any) {\n    if (!this.contactFrm) { return; }\n    const form = this.contactFrm;\n    // tslint:disable-next-line:forin\n    for (const field in this.formErrors) {\n      // clear previous error message (if any)\n      this.formErrors[field] = '';\n      const control = form.get(field);\n      // setup custom validation message to form\n      if (control && control.dirty && !control.valid) {\n        const messages = this.validationMessages[field];\n        // tslint:disable-next-line:forin\n        for (const key in control.errors) {\n          this.formErrors[field] += messages[key] + ' ';\n        }\n      }\n    }\n  }\n  // form errors model\n  // tslint:disable-next-line:member-ordering\n  formErrors = {\n    'name': '',\n    'email': '',\n    'gender': '',\n    'birth': '',\n    'techno': '',\n    'message': ''\n  };\n  // custom valdiation messages\n  // tslint:disable-next-line:member-ordering\n  validationMessages = {\n    'name': {\n      'maxlength': 'Name cannot be more than 50 characters long.',\n      'required': 'Name is required.'\n    },\n    'email': {\n      'email': 'Invalid email format.',\n      'required': 'Email is required.'\n    },\n    'gender': {\n      'required': 'Gender is required.'\n    },\n    'techno': {\n      'required': 'Technology is required.'\n    },\n    'birth': {\n      'required': 'Birthday is required.'\n    },\n    'message': {\n      'required': 'message is required.'\n    }\n\n  };\n  onSubmit(formData: any) {\n    const contactData = this.mapDateData(formData.value);\n    switch (this.data.dbops) {\n      case DBOperation.create:\n        this._contactService.addContact(Global.BASE_USER_ENDPOINT + 'addContact', contactData).subscribe(\n          data => {\n            // Success\n            if (data.message) {\n              this.dialogRef.close('success');\n            } else {\n              this.dialogRef.close('error');\n            }\n          },\n          error => {\n            this.dialogRef.close('error');\n          }\n        );\n        break;\n      case DBOperation.update:\n        this._contactService.updateContact(Global.BASE_USER_ENDPOINT + 'updateContact', contactData.id, contactData).subscribe(\n          data => {\n            // Success\n            if (data.message) {\n              this.dialogRef.close('success');\n            } else {\n              this.dialogRef.close('error');\n            }\n          },\n          error => {\n            this.dialogRef.close('error');\n          }\n        );\n        break;\n      case DBOperation.delete:\n        this._contactService.deleteContact(Global.BASE_USER_ENDPOINT + 'deleteContact', contactData.id).subscribe(\n          data => {\n            // Success\n            if (data.message) {\n              this.dialogRef.close('success');\n            } else {\n              this.dialogRef.close('error');\n            }\n          },\n          error => {\n            this.dialogRef.close('error');\n          }\n        );\n        break;\n    }\n  }\n  SetControlsState(isEnable: boolean) {\n    isEnable ? this.contactFrm.enable() : this.contactFrm.disable();\n  }\n\n  mapDateData(contact: IContact): IContact {\n    contact.birth = new Date(contact.birth).toISOString();\n    return contact;\n  }\n}","module.exports = \"/* .contactlist{\\r\\n  text-align: center;\\r\\n} */\\r\\n\\r\\n.spinner{\\r\\n    top: 45%;\\r\\n    left: 47%;\\r\\n    position: fixed;\\r\\n  }\\r\\n\\r\\n.contactlist-container, #paginator {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    min-width: 300px;\\r\\n    max-width: 1200px;\\r\\n    max-height: 700px;\\r\\n    overflow: auto;\\r\\n    margin: 0 auto;\\r\\n  }\"","module.exports = \"<div class=\\\"spinner\\\" *ngIf=\\\"loadingState; else contactlist\\\">\\n  <mat-spinner></mat-spinner>\\n  </div>\\n  <ng-template class=\\\"contactlist\\\" #contactlist>\\n    <h2 style=\\\"text-align: center;\\\">Contact List</h2>\\n    <div class=\\\"contactlist-container mat-elevation-z8\\\">\\n      <div><button title=\\\"Create\\\" mat-raised-button color=\\\"accent\\\" (click)=\\\"addContact()\\\">Create</button></div>\\n      <table mat-table #table [dataSource]=\\\"dataSource\\\">\\n  \\n        <!-- Id Column -->\\n        <!-- <ng-container matColumnDef=\\\"id\\\">\\n        <th mat-header-cell *matHeaderCellDef> Id </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n      </ng-container> -->\\n  \\n        <!-- Name Column -->\\n        <ng-container matColumnDef=\\\"name\\\">\\n          <th mat-header-cell *matHeaderCellDef> Name </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n        </ng-container>\\n  \\n        <!-- Email Column -->\\n        <ng-container matColumnDef=\\\"email\\\">\\n          <th mat-header-cell *matHeaderCellDef> Email </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\n        </ng-container>\\n  \\n        <!-- Gender Column -->\\n        <ng-container matColumnDef=\\\"gender\\\">\\n          <th mat-header-cell *matHeaderCellDef> Gender </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{getGender(element.gender)}} </td>\\n        </ng-container>\\n  \\n        <!-- Birth Column -->\\n        <ng-container matColumnDef=\\\"birth\\\">\\n          <th mat-header-cell *matHeaderCellDef> Birthday </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.birth | date: 'MM-dd-yyyy' }} </td>\\n        </ng-container>\\n  \\n        <!-- Technology Column -->\\n        <ng-container matColumnDef=\\\"techno\\\">\\n          <th mat-header-cell *matHeaderCellDef> Technology </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.techno}} </td>\\n        </ng-container>\\n  \\n        <!-- Message Column -->\\n        <ng-container matColumnDef=\\\"message\\\">\\n          <th mat-header-cell *matHeaderCellDef> Message </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.message}} </td>\\n        </ng-container>\\n  \\n        <ng-container matColumnDef=\\\"action\\\">\\n          <th mat-header-cell *matHeaderCellDef> Action </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\n            <button title=\\\"Edit\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"editContact(element.id)\\\">Edit</button>\\n            <button title=\\\"Delete\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"deleteContact(element.id)\\\">Delete</button>\\n          </td>\\n        </ng-container>\\n  \\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n      </table>\\n  \\n    </div>\\n  </ng-template>\"","import { Component, ViewChild, OnInit } from '@angular/core';\nimport { MatTableDataSource, MatSnackBar } from '@angular/material';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nimport { ContactformComponent } from '../contactform/contactform.component';\n\nimport { ContactService } from '../services/contact.service';\nimport { IContact } from '../model/contact';\nimport { DBOperation } from '../shared/DBOperation';\nimport { Global } from '../shared/Global';\n\n@Component({\n  selector: 'app-contactlist',\n  templateUrl: './contactlist.component.html',\n  styleUrls: ['./contactlist.component.css']\n})\nexport class ContactlistComponent implements OnInit {\n  contacts: IContact[];\n  contact: IContact;\n  loadingState: boolean;\n  dbops: DBOperation;\n  modalTitle: string;\n  modalBtnTitle: string;\n\n  // set columns that will need to show in listing table\n  displayedColumns = ['name', 'email', 'gender', 'birth', 'techno', 'message', 'action'];\n  // setting up datasource for material table\n  dataSource = new MatTableDataSource<IContact>();\n\n  constructor(public snackBar: MatSnackBar, private _contactService: ContactService, private dialog: MatDialog) { }\n\n  ngOnInit() {\n    this.loadingState = true;\n    this.loadContacts();\n  }\n  openDialog(): void {\n    const dialogRef = this.dialog.open(ContactformComponent, {\n      width: '700px',\n      data: { dbops: this.dbops, modalTitle: this.modalTitle, modalBtnTitle: this.modalBtnTitle, contact: this.contact }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      if (result === 'success') {\n        this.loadingState = true;\n        this.loadContacts();\n        switch (this.dbops) {\n          case DBOperation.create:\n            this.showMessage('Data successfully added.');\n            break;\n          case DBOperation.update:\n            this.showMessage('Data successfully updated.');\n            break;\n          case DBOperation.delete:\n            this.showMessage('Data successfully deleted.');\n            break;\n        }\n      } else if (result === 'error') {\n        this.showMessage('There is some issue in saving records, please contact to system administrator!');\n      } else {\n       // this.showMessage('Please try again, something went wrong');\n      }\n    });\n  }\n\n  loadContacts(): void {\n    this._contactService.getAllContact(Global.BASE_USER_ENDPOINT + 'getAllContact')\n      .subscribe(contacts => {\n        this.loadingState = false;\n        this.dataSource.data = contacts;\n      });\n  }\n\n  getGender(gender: number): string {\n    return Global.genders.filter(ele => ele.id === gender).map(ele => ele.name)[0];\n  }\n\n  addContact() {\n    this.dbops = DBOperation.create;\n    this.modalTitle = 'Add New Contact';\n    this.modalBtnTitle = 'Add';\n    this.openDialog();\n  }\n  editContact(id: number) {\n    this.dbops = DBOperation.update;\n    this.modalTitle = 'Edit Contact';\n    this.modalBtnTitle = 'Update';\n    this.contact = this.dataSource.data.filter(x => x.id === id)[0];\n    this.openDialog();\n  }\n  deleteContact(id: number) {\n    this.dbops = DBOperation.delete;\n    this.modalTitle = 'Confirm to Delete ?';\n    this.modalBtnTitle = 'Delete';\n    this.contact = this.dataSource.data.filter(x => x.id === id)[0];\n    this.openDialog();\n  }\n  showMessage(msg: string) {\n    this.snackBar.open(msg, '', {\n      duration: 3000\n    });\n  }\n}\n","module.exports = \"\"","module.exports = \"<aside>\\n  <strong>Nethealth Accounnt</strong>\\n  <p>This utility is designed to register external Applications.</p>\\n</aside>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"li .glyphicon {\\r\\n    margin-right: 10px;\\r\\n}\\r\\n\\r\\n/* Highlighting rules for nav menu items */\\r\\n\\r\\nli.link-active a,\\r\\nli.link-active a:hover,\\r\\nli.link-active a:focus {\\r\\n    background-color: #4189C7;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n/* Keep the nav menu independent of scrolling and on top of other items */\\r\\n\\r\\n.main-nav {\\r\\n    position: fixed;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    right: 0;\\r\\n    z-index: 1;\\r\\n}\\r\\n\\r\\n@media (min-width: 768px) {\\r\\n    /* On small screens, convert the nav menu to a vertical sidebar */\\r\\n    .main-nav {\\r\\n        height: 100%;\\r\\n        width: calc(25% - 20px);\\r\\n    }\\r\\n    .navbar {\\r\\n        border-radius: 0px;\\r\\n        border-width: 0px;\\r\\n        height: 100%;\\r\\n    }\\r\\n    .navbar-header {\\r\\n        float: none;\\r\\n    }\\r\\n    .navbar-collapse {\\r\\n        border-top: 1px solid #444;\\r\\n        padding: 0px;\\r\\n    }\\r\\n    .navbar ul {\\r\\n        float: none;\\r\\n    }\\r\\n    .navbar li {\\r\\n        float: none;\\r\\n        font-size: 15px;\\r\\n        margin: 6px;\\r\\n    }\\r\\n    .navbar li a {\\r\\n        padding: 10px 16px;\\r\\n        border-radius: 4px;\\r\\n    }\\r\\n    .navbar a {\\r\\n        /* If a menu item's text is too long, truncate it */\\r\\n        width: 100%;\\r\\n        white-space: nowrap;\\r\\n        overflow: hidden;\\r\\n        text-overflow: ellipsis;\\r\\n    }\\r\\n}\\r\\n\"","module.exports = \"<div class='main-nav'>\\n    <div class='navbar navbar-inverse'>\\n        <div class='navbar-header'>\\n            <button type='button' class='navbar-toggle' data-toggle='collapse' data-target='.navbar-collapse' [attr.aria-expanded]='isExpanded' (click)='toggle()'>\\n                <span class='sr-only'>Toggle navigation</span>\\n                <span class='icon-bar'></span>\\n                <span class='icon-bar'></span>\\n                <span class='icon-bar'></span>\\n            </button>\\n            <a class='navbar-brand' [routerLink]='[\\\"/\\\"]'>Accounts</a>\\n        </div>\\n        <div class='clearfix'></div>\\n        <div class='navbar-collapse collapse' [ngClass]='{ \\\"in\\\": isExpanded }'>\\n            <ul class='nav navbar-nav'>\\n                <li [routerLinkActive]='[\\\"link-active\\\"]' [routerLinkActiveOptions]='{ exact: true }'>\\n                    <a [routerLink]='[\\\"/home\\\"]' (click)='collapse()'>\\n                        <span class='glyphicon glyphicon-home'></span> Home\\n                    </a>\\n                </li>\\n                <li [routerLinkActive]='[\\\"link-active\\\"]'>\\n                    <a [routerLink]='[\\\"/applications\\\"]' (click)='collapse()'>\\n                        <span class='glyphicon glyphicon-education'></span> Clients\\n                    </a>\\n                </li>   \\n                <li [routerLinkActive]='[\\\"link-active\\\"]'>\\n                    <a [routerLink]='[\\\"/contacts\\\"]' (click)='collapse()'>\\n                        <span class='glyphicon glyphicon-user'></span> Contact\\n                    </a>\\n                </li>               \\n            </ul>\\n        </div>\\n    </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent {\n  isExpanded = false;\n\n  collapse() {\n    this.isExpanded = false;\n  }\n\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpErrorResponse} from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError} from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IApplication } from '../model/application';\nconst httpOptions = {\n    headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n    })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApplicationService {\n  constructor(private http: HttpClient) { }\n  // get all contact data    \n  getAll(url: string): Observable<IApplication[]> {\n      return this.http.get<IApplication[]>(url).pipe(catchError(this.handleError));\n  }\n  // insert new contact details    \n  create(url: string, application: IApplication): Observable<any> {\n      return this.http.post(url, JSON.stringify(application), httpOptions).pipe(catchError(this.handleError));\n  }\n  // update contact details    \n  update(url: string, clientId: string, application: IApplication): Observable<any> {\n      const newurl = `${url}?clientId=${clientId}`;\n      return this.http.put(newurl, application, httpOptions).pipe(catchError(this.handleError));\n  }\n  // delete contact information    \n  delete(url: string, clientId: string): Observable<any> {\n      const newurl = `${url}?clientId=${clientId}`; // DELETE api/contact?id=42    \n      return this.http.delete(newurl, httpOptions).pipe(catchError(this.handleError));\n  }\n  // custom handler    \n  private handleError(error: HttpErrorResponse) {\n      if (error.error instanceof ErrorEvent) {\n          // A client-side or network error occurred. Handle it accordingly.    \n          console.error('An error occurred:', error.error.message);\n      } else {\n          // the backend returned an unsuccessful response code.    \n          // the response body may contain clues as to what went wrong,    \n          console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n      // return an observable with a user-facing error message    \n      return throwError('Something bad happened; please try again later.');\n  }\n}  \n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpErrorResponse} from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError} from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IContact } from '../model/contact';\nconst httpOptions = {\n    headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n    })\n};\n@Injectable()\nexport class ContactService {\n    constructor(private http: HttpClient) { }\n    // get all contact data    \n    getAllContact(url: string): Observable<IContact[]> {\n        return this.http.get<IContact[]>(url).pipe(catchError(this.handleError));\n    }\n    // insert new contact details    \n    addContact(url: string, contact: IContact): Observable<any> {\n        return this.http.post(url, JSON.stringify(contact), httpOptions).pipe(catchError(this.handleError));\n    }\n    // update contact details    \n    updateContact(url: string, id: number, contact: IContact): Observable<any> {\n        const newurl = `${url}?id=${id}`;\n        return this.http.put(newurl, contact, httpOptions).pipe(catchError(this.handleError));\n    }\n    // delete contact information    \n    deleteContact(url: string, id: number): Observable<any> {\n        const newurl = `${url}?id=${id}`; // DELETE api/contact?id=42    \n        return this.http.delete(newurl, httpOptions).pipe(catchError(this.handleError));\n    }\n    // custom handler    \n    private handleError(error: HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n            // A client-side or network error occurred. Handle it accordingly.    \n            console.error('An error occurred:', error.error.message);\n        } else {\n            // the backend returned an unsuccessful response code.    \n            // the response body may contain clues as to what went wrong,    \n            console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n        }\n        // return an observable with a user-facing error message    \n        return throwError('Something bad happened; please try again later.');\n    }\n}  ","export enum DBOperation {\r\n    create = 1,\r\n    update = 2,\r\n    delete = 3\r\n}","export class Global {\r\n    public static BASE_USER_ENDPOINT = 'api/contact/';\r\n    public static BASE_APPLICATION_ENDPOINT = 'api/application/';\r\n    public static genders = [{\r\n        name: 'Male',\r\n        id: 0,\r\n    }, {\r\n        name: 'Female',\r\n        id: 1\r\n    }];\r\n    public static technologies = ['JavaScript', 'SharePoint', 'C#'];\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}